// Rizq Backend API
// Halal Income Opportunity Platform
// Author: Kyle Burns

require("dotenv").config();
const express = require("express");
const cors = require("cors");
const db = require("./db");

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors()); // Allow frontend to connect
app.use(express.json()); // Parse JSON request bodies

// =====================================================
// Health Check Endpoint
// =====================================================
app.get("/api/health", (req, res) => {
  res.json({
    status: "ok",
    message: "Rizq API is running",
    timestamp: new Date().toISOString(),
  });
});

// =====================================================
// GET /api/jobs - Get all jobs with optional filters
// =====================================================
app.get("/api/jobs", async (req, res) => {
  try {
    // Extract query parameters
    const {
      location,
      remote,
      job_type,
      halal_only,
      limit = 20,
      offset = 0,
    } = req.query;

    // Build dynamic SQL query
    let query = `
      SELECT 
        j.*,
        j.verification_score,
        hv.no_riba,
        hv.no_alcohol,
        hv.no_gambling
      FROM jobs j
      LEFT JOIN halal_verification hv ON j.id = hv.job_id
      WHERE j.is_active = true
    `;

    const params = [];
    let paramIndex = 1;

    // Add filters dynamically
    if (location) {
      query += ` AND j.location ILIKE $${paramIndex}`;
      params.push(`%${location}%`);
      paramIndex++;
    }

    if (remote === "true") {
      query += ` AND j.remote = true`;
    }

    if (job_type) {
      query += ` AND j.job_type = $${paramIndex}`;
      params.push(job_type);
      paramIndex++;
    }

    if (halal_only === "true") {
      query += ` AND j.halal_verified = true`;
    }

    // Order by posted date (newest first)
    query += ` ORDER BY j.posted_date DESC`;

    // Add pagination
    query += ` LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`;
    params.push(parseInt(limit), parseInt(offset));

    // Execute query
    const result = await db.query(query, params);

    // Get total count for pagination
    let countQuery = `
      SELECT COUNT(*) 
      FROM jobs j 
      WHERE j.is_active = true
    `;

    // Apply same filters to count
    const countParams = [];
    let countParamIndex = 1;

    if (location) {
      countQuery += ` AND j.location ILIKE $${countParamIndex}`;
      countParams.push(`%${location}%`);
      countParamIndex++;
    }

    if (remote === "true") {
      countQuery += ` AND j.remote = true`;
    }

    if (job_type) {
      countQuery += ` AND j.job_type = $${countParamIndex}`;
      countParams.push(job_type);
      countParamIndex++;
    }

    if (halal_only === "true") {
      countQuery += ` AND j.halal_verified = true`;
    }

    const countResult = await db.query(countQuery, countParams);
    const totalJobs = parseInt(countResult.rows[0].count);

    // Return response
    res.json({
      success: true,
      jobs: result.rows,
      pagination: {
        total: totalJobs,
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: parseInt(offset) + result.rows.length < totalJobs,
      },
    });
  } catch (error) {
    console.error("Error fetching jobs:", error);
    res.status(500).json({
      success: false,
      error: "Failed to fetch jobs",
    });
  }
});

// =====================================================
// GET /api/jobs/:id - Get single job by ID
// =====================================================
app.get("/api/jobs/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const query = `
      SELECT 
        j.*,
        hv.*
      FROM jobs j
      LEFT JOIN halal_verification hv ON j.id = hv.job_id
      WHERE j.id = $1 AND j.is_active = true
    `;

    const result = await db.query(query, [id]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: "Job not found",
      });
    }

    res.json({
      success: true,
      job: result.rows[0],
    });
  } catch (error) {
    console.error("Error fetching job:", error);
    res.status(500).json({
      success: false,
      error: "Failed to fetch job",
    });
  }
});

// =====================================================
// GET /api/jobs/search - Search jobs by keyword
// =====================================================
app.get("/api/jobs/search", async (req, res) => {
  try {
    const { q, limit = 20, offset = 0 } = req.query;

    if (!q) {
      return res.status(400).json({
        success: false,
        error: "Search query (q) is required",
      });
    }

    const query = `
      SELECT 
        j.*,
        hv.verification_score
      FROM jobs j
      LEFT JOIN halal_verification hv ON j.id = hv.job_id
      WHERE j.is_active = true
        AND (
          j.title ILIKE $1 
          OR j.company ILIKE $1 
          OR j.description ILIKE $1
        )
      ORDER BY j.posted_date DESC
      LIMIT $2 OFFSET $3
    `;

    const searchPattern = `%${q}%`;
    const result = await db.query(query, [searchPattern, limit, offset]);

    res.json({
      success: true,
      query: q,
      jobs: result.rows,
      count: result.rows.length,
    });
  } catch (error) {
    console.error("Error searching jobs:", error);
    res.status(500).json({
      success: false,
      error: "Failed to search jobs",
    });
  }
});

// =====================================================
// GET /api/stats - Platform statistics
// =====================================================
app.get("/api/stats", async (req, res) => {
  try {
    // Total jobs
    const totalQuery = "SELECT COUNT(*) FROM jobs WHERE is_active = true";
    const totalResult = await db.query(totalQuery);
    const totalJobs = parseInt(totalResult.rows[0].count);

    // Halal verified count
    const halalQuery =
      "SELECT COUNT(*) FROM jobs WHERE is_active = true AND halal_verified = true";
    const halalResult = await db.query(halalQuery);
    const halalJobs = parseInt(halalResult.rows[0].count);

    // Jobs by type
    const typeQuery = `
      SELECT job_type, COUNT(*) as count 
      FROM jobs 
      WHERE is_active = true 
      GROUP BY job_type
    `;
    const typeResult = await db.query(typeQuery);

    // Top locations
    const locationQuery = `
      SELECT location, COUNT(*) as count 
      FROM jobs 
      WHERE is_active = true AND location IS NOT NULL
      GROUP BY location 
      ORDER BY count DESC 
      LIMIT 5
    `;
    const locationResult = await db.query(locationQuery);

    res.json({
      success: true,
      stats: {
        total_jobs: totalJobs,
        halal_verified: halalJobs,
        verification_rate:
          totalJobs > 0 ? Math.round((halalJobs / totalJobs) * 100) : 0,
        jobs_by_type: typeResult.rows,
        top_locations: locationResult.rows,
      },
    });
  } catch (error) {
    console.error("Error fetching stats:", error);
    res.status(500).json({
      success: false,
      error: "Failed to fetch statistics",
    });
  }
});

// =====================================================
// 404 Handler
// =====================================================
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: "Endpoint not found",
  });
});

// =====================================================
// Start Server
// =====================================================
app.listen(PORT, () => {
  console.log("=".repeat(50));
  console.log(`üöÄ Rizq API Server Running`);
  console.log(`üìç http://localhost:${PORT}`);
  console.log(`üïå Bismillah - In the name of Allah`);
  console.log("=".repeat(50));
});
